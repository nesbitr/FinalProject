v1.13

Compiler and library changes

Simple2D can now be compiled with Boost 1.55 in Visual Studio 2013 (builds in Visual Studio 2012 use Boost 1.53 and are known to be compatible with Boost 1.47).
Visual Studio 2013 binaries are now provided for Simple2D and Effects11 in both Debug and Release configurations.
BREAKING CHANGE: The library folder structure has changed: include lib\vc11\$(Configuration) for Visual Studio 2012 builds or lib\vc12\$(Configuration) for Visual Studio 2013 builds, where $(Configuration) is either Debug or Release. The 'd' suffix on Debug library builds is no longer used for either Simple2D.lib or Effects11.lib.
BREAKING CHANGE: The Effects11 libraries have been moved from 'redist' to 'lib\vcXX\$(Configuration)'.
The 'redist' folder now includes D3DCompiler_47.dll for applications using DirectX shader compilation built with Visual Studio 2013 (builds for Visual Studio 2012 should use the already included D3DCompiler_46.dll).
The Simple2D 1.07 compatibility libraries (Simple2D_compat107.lib and Simple2Dd_compat107.lib) have been removed. Please migrate your applications to Simple2D 1.10 or later. NOTE: You can still build these libraries by creating a new Build Configuration in Visual Studio and defining SIMPLE2D_COMPAT_107 in the Preprocessor Definitions configuration section.
WARNING REGARDING Effects11.lib IN VISUAL STUDIO 2013: Visual Studio 2013 ships with D3DCompiler_47.DLL (Visual Studio 2012 ships with D3DCompiler_46.DLL which generates the following warning when compiling shaders using the Effects11 framework: "warning X4717: Effects deprecated for D3DCompiler_47". Be sure to ensure your shader compilation code deals with this warning gracefully. The Simple3DBoxDemo and Simple3DBoxSceneDemo shipping with this version of Simple2D have compilation error checking commented out so that they run correctly.

Code changes

Dependencies on boost::shared_ptr and boost::function have been removed and replaced with std::shared_ptr and std::function. Breaking change: Note that empty function arguments must now be passed as nullptr instead of NULL.
'const' was added to some function declarations.

Program structure

A new virtual function Simple2D::OnResize(int width, int height) can be overrided to perform post-processing after the render target has been re-sized and when it first becomes visible. The function is only called if ResizeBehaviour == RB_Resize (particularly useful for setting the projection matrix according to the render target's aspect ratio in 3D applications)

Animations

The Animation class is now templated in the return type of the result of an animation function. Use TypedAnimation<T> to instantiate a templated animation (Animation is a specialization using TypedAnimation<double>, preserving the existing behaviour so no code changes are required). The idea of this is if you want to use an int or float instead of a double for the return type, to avoid having to use static casts in your code. Note that AnimationChains must still use doubles and attempting to cast any TypedAnimation other than TypedAnimation<double> to AnimationChain will throw an exception.
You can now get the current animation function result by just using the object variable name instead of object.Get() or object.GetAnimOffset() (implicit cast conversion to type T).
const has been added to all the relevant function definitions in TypedAnimation.
You can now get the current animation result + sepcified % offset by using the function object operator object(offset) instead of object.GetAnimOffset(offset).
The animation factory functions WaitAt, FromTo and FromPlus now return a TypedAnimation<T>.
The animation factory functions WaitAt, FromTo and FromPlus have an additional optional bool argument which you can set to false to start the animation immediately, negating the need to call Reset() immediately after the factory call.
The new animation factory function Fixed(T value) creates an animation with a fixed, clamped value which starts immediately.
The new animation factory functions FromToAndClamp and FromPlusAndClamp mirror FromTo and FromPlus but don't repeat the animation from the beginning when it completes, instead holding it at the final value.
TypedAnimation<T> has a new constructor taking a single value, the behaviour is equivalent to Fixed(T value). This also allows you to write code such as myAnimation = 123;

Text

Bug fix: Simple2D::TextWidth did not correctly include the width of trailing whitespace when calculating the pixel width of an entire string (Note: it is the caller's responsibility to ensure whitespace is trimmed from the input string if it should not be counted in the pixel width).

Interface objects

Bug fix: when the caret was placed adjacent to whitespace in a text box, or when a selection in a text box contained whitespace at its start or end, the whitespace was not rendered, causing an apparent whitespace truncation in the entered text. The actual text as stored by the application was unaffected - this was a rendering bug only.

Math & Time

Simple2D::Random() now has an overload for generating and returning floats as well as ints. Usage: float r = Simple2D::Random(1.0f, 5.0f);
The new function float Simple2D::GetLastFrameTime() gets the time elapsed in seconds between the start of the last frame and the start of the current frame. It is equivalent to Simple2D::LinearMovement(1.0f);
The new templated function T Clamp(T v, T a1, T a2) returns v bounded between a1 and a2 inclusive.
The new function Simple2D::GetAspectRatio() returns a float with the render target's current aspect ratio

DirectX Accessibility

RenderTargetView and DepthStencilView are now public members of Simple2D (instead of protected).

Changes to example applications

AnimationAndGlyphMetricsDemo, PathGeometryDemo, Simple3DBoxSceneDemo - now show how to use the simplified animation overloads and TypedAnimation<T>.
Simple3DBoxDemo, Simple3DBoxSceneDemo - now show how to use the overrideable OnResize() function and GetAspectRatio() to set the projection matrix.
CollisionDemo3 - more comments have been added to clarify the collision detection code

v1.12 (09-Nov-2013)

Initialization

Breaking change: Initialization parameters to your Simple2D application are now configured in the new Simple2DStartupInfo struct. See the header file for information on the available settings; most of them mirror the previous Set*() methods. After defining a Simple2DStartupInfo struct, start your application as follows: MyProgram(si).Run(). NOTE: Derived application constructors MUST pass Simple2DStartupInfo to the Simple2D parent object. You can still use a non-parameterized constructor to accept all the default settings.
Breaking change: The following methods were only usable before the application was initialized and have been removed:
- SetWindowName
- SetResolution
- SetEnableFullScreen
- SetFullScreen
- SetEnableModeSwitch
- SetResizableWindow
- SetMinimumWindowSize
All of these settings can now be configured via Simple2DStartupInfo. The following methods are usable at main runtime and have been retained:
- SetWindowTitle
- SetResizeBehaviour
- SetBackgroundColour
- SetEnableClear
- SetShowFps
- SetVSyncClamp
All of these besides SetShowFps() can also be set via Simple2DStartupInfo.
Breaking change: The Simple2D class constructor no longer accepts the 3 optional arguments ManufacturerName, AppName and Version. Specify these via Simple2DStartupInfo and pass this struct to the constructor instead
Breaking change: Run() no longer accepts an icon resource ID. Specify it via Simple2DStartupInfo instead (IconResource)
Important change: The application windows are now created (but not displayed) before CreateDeviceIndependentResources is called, instead of when you call Run(). This means that window handles are now available in your class constructor and SetupResources() as well as SetupInitialResources() and SetupApplication().
Important change: CreateDeviceResources() now only creates window-size-dependent resources. The rest, ie. Direct3D device and context creation, feature level checking, Direct2D device creation and swap chain creation have been moved from CreateDeviceResources() to CreateDeviceIndependentResources() to remove redundant re-initialization. Corresponding changes have been made to DiscardDeviceResources().
You can now enable Direct3D features by setting the Enable3D flag in Simple2DStartupInfo (see below). If you set Enable3D, BeginDraw() and EndDraw() will no longer be called automatically on the Direct2D device context when OnRender() executes, so all scenes, objects and DrawScene() must include them when rendering Direct2D objects. To avoid unnecessary overhead, set Enable3D to false when developing 2D-only applications (the default is false)
Error checking during initialization has been improved and some failures will now cause a Windows error message box to be displayed
A new Simple2DStartupInfo struct allows you to pass basic initialization data to the Simple2D constructor Simple2D::Simple2D(Simple2DStartupInfo):
ManufacturerName, AppName, Version (all three or none must be supplied) - used for calculating data paths for application local storage
ResolutionX, ResolutionY - the starting window resolution
MinimumFeatureLevel - the minimum supported Direct3D feature level required by your application
Enable3D - enable/disable Direct3D rendering pipeline access and processing
IconResource - icon resource ID for the application window (0 for default)
WindowName - application window title
ResizeBehaviourType - window resize behaviour
BackgroundColour - Direct2D render target background colour if clearing is enabled
EnableClear - enable/disable Direct2D render target clear at start of each frame
EnableFullScreen - enable/disable full-screen operation on user demand
FullScreen - start application full-screen or windowed
EnableModeSwitch - enable/disable full-screen display mode switching
ResizableWindow - enable/disable window resizing
MinimumWindowSizeX, MinimumWindowSizeY - the minimum window size
EnableMSAA - enable/disable 4x multi-sampling anti-aliasing (MSAA) when Direct3D is used
VSyncClamp - vertical sync clamp (0 = no clamp, >0 = a v-sync multiple)
Bug fix: The initial render target (window) resolution is now available with the correct values in your application's main constructor if you use Simple2DStartupInfo.
Bug fix: CreateDeviceIndependentResources() would re-create IDWriteFactory and WICImagingFactory objects even if they already existed (minor memory leak)

DirectX Accessibility

Breaking change: the Direct3D device is renamed from Direct3DDevice to Direct3D
Breaking change: the Direct3D device context is renamed from Direct3DContext to Screen3D
Simple2D now automatically creates a Direct3D render target view, depth/stencil buffer, depth/stencil view and default viewport, and binds them to the Direct3D pipeline whenever device resources are re-created (in CreateDeviceResources()), and deals with window re-sizing and full-screen behaviour automatically if you enable 3D processing with Enable3D. Accessors: RenderTargetView, DepthStencilView
You can now specify the minimum DirectX feature level (D3D_FEATURE_LEVEL) required by your application in Simple2DStartupInfo. Specify a floating point value for MinimumFeatureLevel, eg. 9.1, 10.0, 11.1 for the feature set required
You can now specify whether to use 4xMSAA (multisampling) in Simple2DStartupInfo with EnableMSAA (bool)

Interface objects

InterfaceObjects can now extend the main application's Windows message pump by overriding bool InterfaceObject::doOnWindowsMessage(HWND, UINT, WPARAM, LPARAM). This is called before the application's main Windows message pump extension (if supplied by the developer) and before Simple2D's own message processor executes. Returning false will allow the message to propagate to these handlers - return true if you process the message and false if not. (This feature is used to provide clipboard functionality in TextBox)

Text boxes now support the following navigation behaviours:
- Per-character caret navigation (left and right arrow keys)
- Per-word caret navigation (CTRL+left and right arrow keys)
- Go to start and end of text (Home and End keys)
- Caret positioning at end of text when text box gains focus

Text boxes now support the following direct editing behaviours:
- Insert text at caret position instead of just at end of text
- Delete text before caret position instead of just at end of text (Backspace key)
- Delete text after caret position (Delete key)

Text boxes now support the following selection behaviours:
- Per-character selection (SHIFT+left and right arrow keys)
- Per-word selection (SHIFT+CTRL+left and right arrow keys)
- Select to start or end of line (SHIFT+Home and SHIFT+End keys) with selection inversion when direction of selection is opposite to previous direction of caret movement (same as Windows selection semantics)
- Navigate without SHIFT to clear the selection; navigating left to clear a selection moves the caret to the left-hand end of the selection before clearing, navigating right to clear a selection moves the caret to the right-hand end of the selection before clearing (same as Windows selection semantics)
- Delete the selection (Backspace or Delete keys); caret is positioned at start of deleted text
- Select the entire line (CTRL+A)
- Selection replacement (type while text is selected to replace it with the selected character)
- Reducing the selection size to zero characters cancels the selection and re-displays the caret (same as Windows selection semantics)
- Selection is cleared when control gains or loses focus

Text boxes now support the following rendering behaviours:
- Text is now panned according to caret position, text length and last movement instead of overflowing if it doesn't fit into the box, using the same caret behaviour semantics as Windows text boxes
- Caret is not displayed when there is an active selection (same as Windows selection semantics)
- The selection is painted using its own brushes (see below)
- The visible part of the selection only will be displayed if part of the selection is outside the text box visible area
- Backspace visual caret behaviour with text that is longer than the width of the text box:
  - Delete from left-most portion -> caret moves left
  - Delete from last character -> caret is pinned right
  - Delete from middle portions -> caret stays in same position
- Delete visual caret behaviour with text that is longer than the width of the text box:
  - Delete from left-most portion -> caret stays in same position
  - Delete from middle portions -> caret stays in same position
  - Delete from right-most portion -> caret moves right, box is kept filled with text where possible

Note on selection brushes: selection background and text brushes can be set using TextBox::SetSelectionBrushes(textBrush, backgroundBrush). The defaults are black text on a white background.

Text boxes now support the following clipboard behaviours:
- Cut text from text box to Windows clipboard (CTRL+X)
- Copy text from text box to Windows clibpoard (CTRL+C)
- Paste text from Windows clipboard to text box at caret position; the selection is replaced if there is one (CTRL+V)
- Text fields with the IsPassword flag set cannot have any part of their contents cut or copied to the clipboard, but can be pasted into

Note on clipboard behaviour: Copies to the clipboard are done in Unicode. Pastes from the clipboard accept Unicode or ASCII text as input; the Unicode format is preferred where available.

Text boxes now support the following undo behaviours:
- Undo last action with infinite undo buffer (CTRL+Z)
- Redo last undone action (CTRL+Y or SHIFT+CTRL+Z)

Note on undo buffers: each text box has its own undo history which persists between focus changes. Undo items are grouped similarly to Windows semantics, ie. groups of edits or deletes in the same area of the text; cuts and pastes etc.

Breaking change: TextBoxGroupTemplate now has two extra members, selTextBrush and selBoxBrush appearing as the 6th and 7th fields to correspond with the text selection brushes described above.

Text processing

Bug fix: Simple2D::GetTextWidth() now returns the correct width if the string used to create the text layout included newlines

Geometry

You can now clear the transform on a piece of geometry by calling Geometry::ClearTransform(). This is equivalent to calling g.SetTransform(g.None()) or g.SetTransform(D2D1::Matrix3x2F::Identity()).

Gamepad support

You can now set the polling interval at which the USB ports are checked for a connected controller when no controller is currently connected using Gamepad::SetConnectionCheckInterval(unsigned int ms). The default is every 2 seconds.
You can now configure gamepad events to be sent to your own callback functions instead of the Windows message pump with two new parameters: Gamepad::EnableKeyEvents(std::function<void (unsigned int, bool)>, std::function<void (unsigned int)>). The first callback handles button pushes and the second calback handles button releases. The first argument to each callback is the button pressed or released; the bool argument to the first callback specifies whether the button was already depressed or not. Note that keyboard mappings still apply: if you map digital or analog objects to keyboard keys using AddKeyMapping or AddAnalogKeyMapping, the values sent to your callbacks will be Virtual Key codes, otherwise they will be XINPUT_GAMEPAD_* or Gamepad::AnalogButtons values.

Debugging

The new macros HRDieOnFail(function, errortext) and HRReturnOnFail(function, errortext) make dealing with HRESULTs from DirectX simpler. errortext is optional and will be displayed in a Windows error message box if supplied. HRReturnOnFail will return the HRESULT value on failure whereas HRDieOnFail will call exit() and kill the application. To avoid having to specify an empty string when no error message is desired, use HRSilentDieOnFail(function) and HRSilentReturnOnFail(function)

Miscellaneous

Some duplicated code from CreateDeviceResources() and OnResize() was merged
Bug fix: The HRESULT from ID2D1DeviceContext::EndDraw() was being overridden by that from DXGISwapChain::Present1() in Simple2D::OnRender(), which could cause a problem in rare cases when the render target has to be re-created (resources not discarded properly)

Compiler issues

Bug fix: The /Zi compiler option was changed to /Z7 for debug builds, so that the (.pdb) symbol information is built into the .lib file to be distributed. This prevents users receiving compile error LNK4099: PDB 'vc110.pdb' was not found when creating debug builds.

New example applications

Simple3DInitDemo - shows how to initialize and use Direct3D on the same render surface as Direct2D
Simple3DBoxDemo - shows how to use the Direct3D rendering pipeline directly from within Simple2D to draw a 3D box whose movement is animated with the Animation class
Simple3DBoxScneDemo - shows how to re-formulate Simple3DBoxDemo into a Scene with multiple cubes by deriving from SceneObject to create a class representing an instance of a single cube, then adding various instances of it to the active scene
GamepadCallbackDemo - shows how to configure gamepad support to send gamepad events to your own callback functions using std::bind, and how to map analog movements to digital buttons

Note: Simple3DBoxDemo and Simple3DBoxSceneDemo require the Visual C++ Compiler Nov 2012 CTP or Visual C++ 2013 to compile.

Changes to example applications

All applications have been updated to use Simple2DStartupInfo.

GamepadTextDemo - now shows how to change the controller connection polling interval from the default
TextInputDemo - no changes to the demo, but can be used to test out the new TextBox functionality

Search/Replace phrases to update existing code

Where your main application class is called MyProgram, apply these find and replace phrases in the following order:

Default constructor declaration

MyProgram();
MyProgram(Simple2DStartupInfo);

External default constructor definition

MyProgram::MyProgram()
MyProgram::MyProgram(Simple2DStartupInfo si) : Simple2D(si)

In-class default constructor definition (regex)

MyProgram\(\)\r?$
MyProgram(Simple2DStartupInfo si) : Simple2D(si)

Startup parameter construction block in Simple2DStart (regex)

MyProgram (.*);\r?\n((.*\r?\n)*).*Run\(\);
Simple2DStartupInfo si;\n$2\tMyProgram(si).Run();

In-class default constructor definition with initializer list (regex)

MyProgram\(\) : (.*)\r?$
MyProgram(Simple2DStartupInfo si) : Simple2D(si), $1

SetWindowName (regex)

^(.*).SetWindowName\(L"(.*)"\);
\tsi.WindowName = "$2";

SetBackgroundColour (regex)

^.*\.SetBackgroundColour\(Colour::(.*)\);
\tsi.BackgroundColour = D2D1::ColorF(Colour::$1);

SetReolution (regex)

^.*\.SetResolution\(([0-9]+), ([0-9]+)\);
\tsi.ResolutionX = $1;\n\tsi.ResolutionY = $2;

SetResizeBehaviour (regex)

^.*\.SetResizeBehaviour\((.*)\);
\tsi.ResizeBehaviourType = $1;

SetMinimumWindowSize (regex)

^.*\.SetMinimumWindowSize\(([0-9]+), ([0-9]+)\);
\tsi.MinimumWindowSizeX = $1;\n\tsi.MinimumWindowSizeY = $2;

Various flags (regex)

^.*\.Set(EnableFullScreen|FullScreen|EnableModeSwitch|ResizableWindow|EnableClear|VSyncClamp)\((.*)\);
\tsi.$1 = $2;

Remove SetShowFps (add this back inside your class constructor)

^.*\.SetShowFps\((true|false)\);
<blank>

Fix destructors from above changes (1)

~MyProgram\(Simple2DStartupInfo\);
~MyProgram();

Fix destructors from above changes (2)

~MyProgram\(Simple2DStartupInfo si\) : Simple2D\(si\)
~MyProgram()

For applications with no constructor, add the following in your main application class:

MyProgram(Simple2DStartupInfo si) : Simple2D(si) {}

Notes on Direct3D use

Applications using run-time shader compilation must link to d3dcompiler.lib and d3dcompiler_46.dll must be in the system DLL paths at runtime. The DLL is re-distributable and included with Simple2D in the redist folder.
Applications using the DirectX Effects Framework must include d3dx11effect.h and link to Effects11d.lib (debug) or Effects11.lib (release). The source code for these is re-distributable and the header plus compiled 32-bit binaries are included with Simple2D in the redist folder.

v1.11 (29-Aug-2013)

Program structure

When creating a standard Windows or full-screen application using a class derived from Simple2D, include Simple2D.h as normal. New feature: If you want to define your own main() or WinMain(), eg. for a console application or custom Windows application, include Simple2DLib.h instead (the new example GamepadTextDemo shows this)

Brushes

Bug fix: Calling Simple2D::Line() without a brush argument (to use the current brush) failed to call Prepare() on the brush (to set gradient properties etc.)
Bug fix: Calling SetPoints(), SetPointsWH(), SetPointsUsingAlignmentType() or SetPointsUsingAlignmentTypeWH() on a brush before the brush resource is created caused an application crash (the brush resource is now created if needed when these functions are called)

Scene objects

You can now unbind an animation from an object with SceneObject::Unbind(bindingName) (this allows the previously bound variable to be set freely once again)
The BindAlpha2 binding type was added

User interface objects

Breaking change: Simple2D::GetFocusObject() now returns a pointer instead of a reference (in case there is no focus object, nullptr is returned)
ButtonTemplate can now be initialized with the parameterized constructor ButtonTemplate(std::string text, std::function<void (Button &)> onClick = NULL)
The UserInterfaceItemGroup template class functions AddItemRow() and AddItemColumn() can now accept a vector of InterfaceItems as well as an array (the size argument can be omitted when using a vector)
The TextBoxTemplate and TextBoxGroupTemplate structs have been added for use with UserInterfaceItemGroup (both can be initialized with parameterized constructors)
A group of text boxes can be referred to as a TextBoxGroup (a concrete specialization of UserInterfaceItemGroup)
TextBox now has an IsPassword public property which you can set to control whether the display of the text is replaced with asterisks ("*")
TextBoxes can now have captions. Configure the caption with TextBox::SetCaption(string text, TextFormat format, GenericBrush *brush, TextBoxCaptionPosition position, int gap). The position parameter should be TBCP_Above or TBCP_Left depending on where the caption should be displayed, and gap is the number of pixels gap between the text box and the caption text.
Typedefs ButtonList and TextBoxList have been added to represent storing ButtonTemplates and TextBoxTemplates in vectors
Tabbable items are now supported. InterfaceObjects in an ObjectGroup with focus can be tabbed through with Tab and Shift+Tab. To implement a tabbable object group, implement ITabbedObjectGroup. To implement a tabbable item, implement ITabbedItem. Currently, only TextBox is tabbable of the built-in interface element types. To find the next item in a tabbed object group, call ITabbedItem *ITabbedObjectGroup::FindTabbedItem(). To find the previous item, specify the optional bool parameter as false. The built-in group ObjectGroup now implements ITabbedObjectGroup by default, so no changes are needed to your code to support tabbable text boxes. Non-tabbable items in a group (objects which do not implement ITabbedItem) will be ignored and can be freely mixed in a group with tabbable items.
Skinned dialog boxes are now available via the new Dialog class. A title bar, information/error label, arbitrary number of text boxes and buttons can be added to the dialog, and the visual layout configured via a separate class. See the SkinnedDialogDemo example for usage information.

Object groups

Objects can now remove themselves from their owner scene or group by calling SceneObject::SetDone() (this can also be used by application code as an alternative to Scene::Remove())
The new functions ObjectManager::AddBehind(&|*), ObjectManager::AddBehindRef(&|*) and ObjectManager::AddDrawingBehind(func) allow you to add objects to the back of a Scene or ObjectGroup (rendered behind all the existing objects)
The parent owner of each object is now stored; set and cleared automatically via SceneObject::SetOwner(ObjectManager &|*) when an object is added to or removed from a scene or group and can be fetched with ObjectManager *SceneObject::GetOwner(). NOTE: SetOwner() should not be called directly by your own applications.
Adding a UserInterfaceItemGroup to a Scene or ObjectGroup now returns a vector of unmanaged raw pointers to the objects created so that you can reference them in your application (the pointers are still managed by the Scene or ObjectGroup so you can just discard them when they are no longer needed)
You can now get the objects in a Scene or ObjectGroup with boost::ptr_list<SceneObject> *ObjectManager::GetObjects().
Bug fix: potential memory leak when removing objects added to a Scene or ObjectGroup via a UserInterfaceItemGroup (SetDeleteBehaviour() was not called on the child objects)
Bug fix: Mouse events were not dispatched to user interface objects in an ObjectGroup (or derived class thereof)
Bug fix: The mouse co-ordinate checking against objects in an ObjectGroup was not mapped relative to the position of the ObjectGroup on the screen
Bug fix: Mouse events were dispatched to user interface objects in an ObjectGroup even if the ObjectGroup was switched off (not visible)
Bug fix: Potential crash if the object with focus is removed from the scene or the scene or group owning the object is deleted (object was not de-focussed first)

Gamepad support

The new Gamepad class (Gamepad.h, included by Simple2DLib.h) provides access to Xbox 360 controllers connected via USB from your applications using XInput
The Gamepad constructor allows you to specify X and Y deadzones for both sticks, in percent (0-1). The default is 5% in X and 2% in Y, based on controller testing.
bool CheckConnection() re-tests all controller connections returns true if a controller is connected, false otherwise
bool GetPort() returns the port (1-4) of the connected controller (0 if not connected) (uses data from previous call to CheckConnection())
bool Refresh() calls CheckConnection() and if a controller is connected, retrieves its state and makes it available in via a number of methods and public fields. Call Gamepad::Refresh() every frame in your UpdateObjects() function, it will automatically deal with controller connects and disconnects. If Refresh() returns true, a controller is connected and its state is now available; if Refresh() returns false, don't do any gamepad input processing this frame
XINPUT_GAMEPAD *GetState() fetches the XINPUT_GAMEPAD object from when the controller state was last retrieved by Refresh(). Only use this if you need a feature which isn't supported by the Gamepad class.
bool IsPressed(WORD) returns true if the specified button is currently pressed down (using the data from the last call to Refresh()), eg. IsPressed(XINPUT_GAMEPAD_A) or IsPressed(XINPUT_GAMEPAD_LEFT_SHOULDER)
void SetDeadzone(float, float) allows you to set the X and Y thumb stick deadzones in percent
Public fields: leftStickX, leftStickY, rightStickX and rightStickY give the off-center movement of each stick from -1 to 1 (-1 is fully left or up, 1 is fully right or down). A value of 0 indicates the stick is in the specified deadzone; all possible positions outside the deadzone are scaled from 0-1. leftTrigger and rightTrigger return the percentage depressed each trigger is, from 0-1. No deadzone is configurable.
Public fields: the Buttons field is a std::map of XInput button codes and official button name strings for use in your own applications
You can configure gamepad support to send keyboard events to your application's Windows message pump (which will forward them to your OnKeyDown and OnKeyUp functions, the active scene etc.) to minimize the number of changes you need to make to allow existing applications to use the gamepad. Use EnableKeyEvents() and DisableKeyEvents() to toggle this on and off (it is off by default; turning it on will cause key events to be sent to the application's main window). Use SetWindow(HWND) to send keyboard event messages to the specified window. Se the new GamepadWinMsgDemo demo for examples.
You can map gamepad buttons to keyboard keys to make integration with existing applications easier. Use AddKeyMapping(WORD, int) with an XINPUT_GAMEPAD_* enum value and a virtual key code to add a mapping, and RemoveKeyMapping(int) or RemoveKeyMappingByButton(WORD) to remove it. Mapped buttons will have the corresponding virtual key code sent in Windows key event messages, unmapped buttons will have their XINPUT_GAMEPAD_* enum value sent. See the new GamepadMappingDemo demo for examples.
You can map the analog sticks and triggers to keyboard keys if their movement amount exceeds a specified threshold. Use AddAnalogKeyMapping(AnalogButtons, float, int) with an analog item enum value, threshold from 0-1 (but must be greater than 0), and a virtual key code to add a mapping, and RemoveAnalogKeyMapping(AnalogButtons) to remove it. Mapped items will have the corresponding virtual key code sent in Windows key event messages; movement of unmapped items will not generate any messages. The values for the AnalogButtons enum are LeftStickLeft, LeftStickRight, LeftStickUp, LeftStickDown, RightStickLeft, RightStickRight, RightStickUp, RightStickDown, LeftTrigger and RightTrigger. See the new GamepadMappingDemo demo for examples.
If you try to map a button or analog item that has already been mapped, the new mapping will replace the old one. To remove all mappings for digital and analog items, call ClearMappings().
You can set the repeat interval for buttons or analog movements on the controller in milliseconds. Use SetRepeatIntervalMsAll(int) to set all buttons and analog movements to a fixed repeat interval. Use SetRepeatIntervalMs(WORD, int) (with an XInput enum value) and SetAnalogRepeatIntervalMs(AnalogButtons) to set repeat rates for individual buttons and analog actions. Use a value of 0 to indicate that the button push or movement should not send repeated messages.

Skinning

EXPERIMENTAL: The ability to create and consume skins and objects which use them has been added (ISkin<>, specializations, Skin, SkinnedObjectGroup, Dialog). See the SkinnedDialogDemo example for information on how to implement and use skins.

Compiler issues

The _SCL_SECURE_NO_WARNINGS flag is now set in the Simple2D library header
Bug fix: Simple2DLib.h in Simple2D 1.10 would not compile on Visual Studio 2010 (syntax error due to use of C++11 for (each) construct)
Bug fix: Simple2D could not be re-compiled by end users because the release libraries were compiled with /GL (Whole Program Optimization). This has been removed

Changes to example applications

AsyncHTTPDemo - now attempts to get the Content-Length of the file to download and show how many bytes there are in total
AsyncHTTPDemo - the notification bar now includes a progress bar when the Content-Length header is present
AsyncHTTPDemo - now allocates its download buffer memory on the heap instead of the stack; the buffer size is increased from 256K to 64MB and a chunk size has been introduced as the maximum amount to download per iteration of the while loop (64K)

New example applications

GamepadTextDemo - shows how to retrieve movement and button information from a connected Xbox 360 controller
GamepadWinMsgDemo - shows how to configure the gamepad library to send button presses/releases to your OnKeyDown and OnKeyUp functions
GamepadMappingDemo - shows how to configure the gamepad library to map buttons and analog movements on the game controller to keyboard keys
SkinnedDialogDemo - shows how to used a skinned dialog box and define custom skins

Known issues: Simple2D::TextWidth() returns an incorrect result if the text contains a newline.
Known issues: ResolutionX and ResolutionY are not correctly set in the main application constructor
Known issues: Gamepad support does not currently support vibration